// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/snowflake.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NextRequest struct {
	ServiceId            int64    `protobuf:"varint,1,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextRequest) Reset()         { *m = NextRequest{} }
func (m *NextRequest) String() string { return proto.CompactTextString(m) }
func (*NextRequest) ProtoMessage()    {}
func (*NextRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snowflake_c7eb7dc49ef80bbd, []int{0}
}
func (m *NextRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextRequest.Unmarshal(m, b)
}
func (m *NextRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextRequest.Marshal(b, m, deterministic)
}
func (dst *NextRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextRequest.Merge(dst, src)
}
func (m *NextRequest) XXX_Size() int {
	return xxx_messageInfo_NextRequest.Size(m)
}
func (m *NextRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NextRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NextRequest proto.InternalMessageInfo

func (m *NextRequest) GetServiceId() int64 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

type NextReply struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NextReply) Reset()         { *m = NextReply{} }
func (m *NextReply) String() string { return proto.CompactTextString(m) }
func (*NextReply) ProtoMessage()    {}
func (*NextReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_snowflake_c7eb7dc49ef80bbd, []int{1}
}
func (m *NextReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NextReply.Unmarshal(m, b)
}
func (m *NextReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NextReply.Marshal(b, m, deterministic)
}
func (dst *NextReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NextReply.Merge(dst, src)
}
func (m *NextReply) XXX_Size() int {
	return xxx_messageInfo_NextReply.Size(m)
}
func (m *NextReply) XXX_DiscardUnknown() {
	xxx_messageInfo_NextReply.DiscardUnknown(m)
}

var xxx_messageInfo_NextReply proto.InternalMessageInfo

func (m *NextReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ParseRequest struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseRequest) Reset()         { *m = ParseRequest{} }
func (m *ParseRequest) String() string { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()    {}
func (*ParseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_snowflake_c7eb7dc49ef80bbd, []int{2}
}
func (m *ParseRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseRequest.Unmarshal(m, b)
}
func (m *ParseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseRequest.Marshal(b, m, deterministic)
}
func (dst *ParseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseRequest.Merge(dst, src)
}
func (m *ParseRequest) XXX_Size() int {
	return xxx_messageInfo_ParseRequest.Size(m)
}
func (m *ParseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParseRequest proto.InternalMessageInfo

func (m *ParseRequest) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ParseReply struct {
	Timestamp            int64    `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	NodeId               int64    `protobuf:"varint,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	ServiceId            int64    `protobuf:"varint,3,opt,name=serviceId,proto3" json:"serviceId,omitempty"`
	Seq                  int64    `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ParseReply) Reset()         { *m = ParseReply{} }
func (m *ParseReply) String() string { return proto.CompactTextString(m) }
func (*ParseReply) ProtoMessage()    {}
func (*ParseReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_snowflake_c7eb7dc49ef80bbd, []int{3}
}
func (m *ParseReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ParseReply.Unmarshal(m, b)
}
func (m *ParseReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ParseReply.Marshal(b, m, deterministic)
}
func (dst *ParseReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParseReply.Merge(dst, src)
}
func (m *ParseReply) XXX_Size() int {
	return xxx_messageInfo_ParseReply.Size(m)
}
func (m *ParseReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ParseReply.DiscardUnknown(m)
}

var xxx_messageInfo_ParseReply proto.InternalMessageInfo

func (m *ParseReply) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ParseReply) GetNodeId() int64 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *ParseReply) GetServiceId() int64 {
	if m != nil {
		return m.ServiceId
	}
	return 0
}

func (m *ParseReply) GetSeq() int64 {
	if m != nil {
		return m.Seq
	}
	return 0
}

func init() {
	proto.RegisterType((*NextRequest)(nil), "snowflake.NextRequest")
	proto.RegisterType((*NextReply)(nil), "snowflake.NextReply")
	proto.RegisterType((*ParseRequest)(nil), "snowflake.ParseRequest")
	proto.RegisterType((*ParseReply)(nil), "snowflake.ParseReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SnowflakeClient is the client API for Snowflake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SnowflakeClient interface {
	Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextReply, error)
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseReply, error)
}

type snowflakeClient struct {
	cc *grpc.ClientConn
}

func NewSnowflakeClient(cc *grpc.ClientConn) SnowflakeClient {
	return &snowflakeClient{cc}
}

func (c *snowflakeClient) Next(ctx context.Context, in *NextRequest, opts ...grpc.CallOption) (*NextReply, error) {
	out := new(NextReply)
	err := c.cc.Invoke(ctx, "/snowflake.Snowflake/Next", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *snowflakeClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseReply, error) {
	out := new(ParseReply)
	err := c.cc.Invoke(ctx, "/snowflake.Snowflake/Parse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakeServer is the server API for Snowflake service.
type SnowflakeServer interface {
	Next(context.Context, *NextRequest) (*NextReply, error)
	Parse(context.Context, *ParseRequest) (*ParseReply, error)
}

func RegisterSnowflakeServer(s *grpc.Server, srv SnowflakeServer) {
	s.RegisterService(&_Snowflake_serviceDesc, srv)
}

func _Snowflake_Next_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServer).Next(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowflake.Snowflake/Next",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServer).Next(ctx, req.(*NextRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Snowflake_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/snowflake.Snowflake/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Snowflake_serviceDesc = grpc.ServiceDesc{
	ServiceName: "snowflake.Snowflake",
	HandlerType: (*SnowflakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Next",
			Handler:    _Snowflake_Next_Handler,
		},
		{
			MethodName: "Parse",
			Handler:    _Snowflake_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/snowflake.proto",
}

func init() { proto.RegisterFile("proto/snowflake.proto", fileDescriptor_snowflake_c7eb7dc49ef80bbd) }

var fileDescriptor_snowflake_c7eb7dc49ef80bbd = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2d, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0xce, 0xcb, 0x2f, 0x4f, 0xcb, 0x49, 0xcc, 0x4e, 0xd5, 0x03, 0xf3, 0x85, 0x38,
	0xe1, 0x02, 0x4a, 0xda, 0x5c, 0xdc, 0x7e, 0xa9, 0x15, 0x25, 0x41, 0xa9, 0x85, 0xa5, 0xa9, 0xc5,
	0x25, 0x42, 0x32, 0x5c, 0x9c, 0xc5, 0xa9, 0x45, 0x65, 0x99, 0xc9, 0xa9, 0x9e, 0x29, 0x12, 0x8c,
	0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x08, 0x01, 0x25, 0x69, 0x2e, 0x4e, 0x88, 0xe2, 0x82, 0x9c, 0x4a,
	0x21, 0x3e, 0x2e, 0xa6, 0x4c, 0x98, 0x1a, 0xa6, 0xcc, 0x14, 0x25, 0x39, 0x2e, 0x9e, 0x80, 0xc4,
	0xa2, 0xe2, 0x54, 0x98, 0x51, 0xe8, 0xf2, 0x45, 0x5c, 0x5c, 0x50, 0x79, 0x90, 0x6e, 0x19, 0x2e,
	0xce, 0x92, 0xcc, 0xdc, 0xd4, 0xe2, 0x92, 0xc4, 0xdc, 0x02, 0x98, 0x45, 0x70, 0x01, 0x21, 0x31,
	0x2e, 0xb6, 0xbc, 0xfc, 0x14, 0x90, 0x1b, 0x98, 0xc0, 0x52, 0x50, 0x1e, 0xaa, 0xf3, 0x98, 0xd1,
	0x9c, 0x27, 0x24, 0xc0, 0xc5, 0x5c, 0x9c, 0x5a, 0x28, 0xc1, 0x02, 0x16, 0x07, 0x31, 0x8d, 0xea,
	0xb8, 0x38, 0x83, 0x61, 0x5e, 0x15, 0x32, 0xe3, 0x62, 0x01, 0xb9, 0x5e, 0x48, 0x4c, 0x0f, 0x11,
	0x1e, 0x48, 0x7e, 0x97, 0x12, 0xc1, 0x10, 0x2f, 0xc8, 0xa9, 0x54, 0x62, 0x10, 0xb2, 0xe4, 0x62,
	0x05, 0x3b, 0x5c, 0x48, 0x1c, 0x49, 0x01, 0xb2, 0x57, 0xa5, 0x44, 0x31, 0x25, 0xc0, 0x5a, 0x9d,
	0xd8, 0xa3, 0x58, 0xc1, 0x21, 0x9e, 0xc4, 0x06, 0xa6, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xd2, 0xa9, 0xd7, 0x19, 0x91, 0x01, 0x00, 0x00,
}
